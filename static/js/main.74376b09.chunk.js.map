{"version":3,"sources":["index.js"],"names":["Square","props","className","highlight","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","onClick","value","Board","i","_this","this","winSquares","key","squares","includes","row","k","col","j","push","renderSquare","React","Component","Game","_this2","Object","D_Jobs_developing_react_tictactoe_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","D_Jobs_developing_react_tictactoe_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","D_Jobs_developing_react_tictactoe_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","winner","setState","concat","step","status","_this3","current","winPlayer","moves","map","move","desc","jumpTo","isDraw","handleClick","line","lines","_lines$i","D_Jobs_developing_react_tictactoe_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.74376b09.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n  const className = 'square' + (props.highlight ? ' highlight' : '');\r\n    return (\r\n      <button \r\n        className={className} \r\n        onClick={props.onClick}>\r\n        {props.value}\r\n      </button>\r\n    );\r\n}\r\n  \r\nclass Board extends React.Component {\r\n  renderSquare(i) {\r\n    const winSquares = this.props.winSquares;\r\n    return (\r\n    <Square \r\n      key={i} //prevent warning\r\n      value={this.props.squares[i]}\r\n      onClick={() => this.props.onClick(i)} \r\n      highlight={winSquares && winSquares.includes(i)}\r\n    />\r\n    );\r\n  }\r\n  \r\n  render() {\r\n    const row = [];\r\n    let k = 0; //key\r\n    for (let i = 0; i < 3; i++) {\r\n      const col = [];\r\n      for (let j = 0; j < 3; j++) {\r\n        col.push(this.renderSquare(3 * i + j)); //push argument without {}, <>\r\n        k++;\r\n      }\r\n      row.push(<div key={k} className=\"board-row\">{col}</div>);\r\n    }\r\n    return (\r\n      <div>\r\n        {row}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n  \r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [{\r\n        squares: Array(9).fill(null),\r\n      }],\r\n      stepNumber: 0,\r\n      xIsNext: true\r\n      };\r\n    }\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares).winner || squares[i]) {\r\n        return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n    this.setState({\r\n      history: history.concat([{\r\n        squares: squares,\r\n      }]),\r\n      stepNumber: history.length,\r\n        xIsNext: !this.state.xIsNext\r\n    });\r\n}\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: (step % 2) === 0,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winner = calculateWinner(current.squares);\r\n    const winPlayer = winner.winner;\r\n   \r\n    let moves = history.map((step, move) => {\r\n      const desc = move ?\r\n      'Go to move #' + move :\r\n      'Restart game';\r\n      if (move === 0) {\r\n      return (\r\n        <li key={move}>\r\n          <button className=\"btn btn-danger btn-flat\" onClick={() => this.jumpTo(move)}>{desc}</button>\r\n        </li>\r\n      ); \r\n      } else { \r\n      return (\r\n        <li key={move}>\r\n          <button className=\"btn btn-primary btn-flat\" onClick={() => this.jumpTo(move)}>{desc}</button>\r\n        </li>\r\n      ) \r\n    }\r\n    });\r\n\r\n    let status;\r\n    if (winPlayer) {\r\n      status = 'Winner: ' + winPlayer;\r\n    } else if (winner.isDraw) {\r\n      status = 'DRAW!';\r\n     } else {\r\n       status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n     }\r\n    \r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <div className=\"next\">{status}</div>\r\n          <Board \r\n            squares={current.squares}\r\n            onClick={(i) => this.handleClick(i)}\r\n            winSquares={winner.line}\r\n          />\r\n\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <ul>{moves}</ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n  \r\n  // ========================================\r\n  \r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n  \r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  \r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return {\r\n        winner: squares[a],\r\n        line: lines[i],\r\n        isDraw: false\r\n      };\r\n    }\r\n  }\r\n\r\n  let isDraw = true;\r\n  for (let i = 0; i < squares.length; i++) {\r\n    if (squares[i] === null) {\r\n      isDraw = false;\r\n      break;\r\n    }\r\n  }\r\n  return {\r\n    winner: null,\r\n    line: null,\r\n    isDraw: isDraw\r\n  };\r\n}"],"sourceRoot":""}